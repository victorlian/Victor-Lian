{"version":3,"sources":["Components/DayList.js","api.js","Components/DetailedList.js","Components/WeatherTable.js","Components/AutosuggestName.js","App.js","serviceWorker.js","index.js"],"names":["DayList","props","classes","this","dateString","weather","date","month","tempString","temp","imgURL","icon","List","className","root","onClick","updateDetailedList","index","ListItem","ListItemText","primary","day","main","src","React","Component","withStyles","theme","width","maxWidth","backgroundColor","palette","background","paper","cursor","config","headers","getWeatherForId","cityId","axios","get","then","response","data","error","console","log","DetailedList","min","max","Typography","varient","title","description","margin","spacing","fontSize","WeatherTable","cellIndex","variant","cityName","Table","TableBody","TableRow","weatherList","map","dayWeather","TableCell","detailIndex","bg","padding","renderInputComponent","inputProps","inputRef","ref","other","TextField","InputProps","node","input","renderSuggestion","suggestion","query","isHighlighted","matches","match","label","parts","parse","MenuItem","selected","component","part","highlight","key","String","style","fontWeight","text","getSuggestionValue","AutoSuggestName","popperNode","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","count","cityNamesForSuggestion","filter","keep","slice","handleSuggestionsFetchRequested","setState","suggestions","handleSuggestionsClearRequested","handleChange","event","newValue","handleNameEntry","state","single","autosuggestProps","onSuggestionsFetchRequested","onSuggestionsClearRequested","divider","placeholder","name","onChange","InputLabelProps","shrink","suggestionsList","renderSuggestionsContainer","options","Popper","anchorEl","open","Boolean","children","Paper","square","containerProps","clientWidth","height","container","position","suggestionsContainerOpen","zIndex","marginTop","unit","left","right","display","listStyleType","App","cityNameEntered","handleGetWeather","id","getCityIdByName","setFiveDayWeatherListWithId","invalid","currentComponent","API","weatherResponse","timezone","city","fiveDayWeatherList","detailedWeatherForDay","list","minMax","getMinMaxTemp","minTemp","maxTemp","simplifyWeatherData","country","startingIndex","fullWeatherList","temps","Math","weatherData","dateObj","Date","dt","getUTCDate","getUTCMonth","getUTCDay","round","nameSplitted","split","countryCode","fullCityList","forEach","cityNameList","loadCityNames","AppBar","Toolbar","color","noWrap","toolbar","pStyle","tableContainer","Grid","item","xs","Button","button","errorMsg","grid","textAlign","mixins","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a39fd161.chunk.js","sourcesContent":["import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n        '&:hover': {\r\n            backgroundColor: '#d3d3d3', //Light grey\r\n            cursor: 'pointer',\r\n        }\r\n    },\r\n});\r\n\r\nclass DayList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        const dateString = this.props.weather.date + \" \" + this.props.weather.month;\r\n        const tempString = this.props.weather.temp + \" °C\"\r\n\r\n        let imgURL = \"http://openweathermap.org/img/wn/\" + this.props.weather.icon + \"@2x.png\";\r\n\r\n        return (\r\n            <List className={classes.root} onClick={() => this.props.updateDetailedList(this.props.index)}>\r\n                <ListItem>\r\n                    <ListItemText primary={this.props.weather.day} />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText primary={dateString} />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText primary={tempString} />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText primary={this.props.weather.main} />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <img src = {imgURL}/> \r\n                </ListItem>\r\n            </List>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(DayList);\r\n\r\n\r\n","import axios from 'axios';\r\n\r\nvar config = {\r\n    headers: {\r\n        'x-api-key': 'cfea31d81f081ff8b10e8be3666b5072',\r\n        'Access-Control-Allow-Origin': '*',\r\n    }\r\n};\r\n\r\nexport default {\r\n    //Needed a little hacking to solve the cors issue\r\n    getWeatherForId(cityId) {\r\n        return axios.get(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/forecast?id=${cityId}&units=metric`, config)\r\n            .then(response => {\r\n                return response.data;\r\n            }).catch(error => {\r\n                console.log(\"ERROR\");\r\n            });\r\n    }, \r\n}","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport API from '../api';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    title: {\r\n        margin: theme.spacing(4, 2, 2),\r\n        fontSize: 18,\r\n    },\r\n});\r\n\r\n\r\n\r\nclass DetailedList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n\r\n        const dateString = this.props.weather.date + \" \" + this.props.weather.month;\r\n        const tempString = this.props.weather.min + \" - \" + this.props.weather.max + \" °C\";\r\n\r\n\r\n        return (\r\n            <div>\r\n                <Typography varient=\"h3\" className={classes.title}>\r\n                    More detailed Weather:\r\n                </Typography>\r\n                <List className={classes.root}>\r\n                    <ListItem>\r\n                        <ListItemText primary={this.props.weather.day} />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <ListItemText primary={dateString} />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <ListItemText primary={tempString} />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        <ListItemText primary={this.props.weather.description} />\r\n                    </ListItem>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(DetailedList);\r\n\r\n\r\n","import React from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\n\r\nimport DayList from './DayList';\r\nimport DetailedList from './DetailedList';\r\n\r\nconst styles = theme => ({\r\n  bg: {\r\n    background: 'black'\r\n  },\r\n  title: {\r\n    padding: '0 1%'\r\n  },\r\n});\r\n\r\n\r\nclass WeatherTable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n\r\n    const { classes } = this.props;\r\n    var cellIndex = 0;\r\n\r\n    return (\r\n      <div>\r\n        <Typography className={classes.title} variant=\"h6\">\r\n          Weather forecast for {this.props.cityName}\r\n        </Typography>\r\n        <Table >\r\n          <TableBody>\r\n            <TableRow>\r\n              {this.props.weatherList.map(dayWeather => {\r\n                return (\r\n                  <TableCell>\r\n                    <DayList index={cellIndex++} weather={dayWeather} updateDetailedList={this.props.updateDetailedList}/>\r\n                  </TableCell>\r\n                );\r\n              })}\r\n            </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n        <DetailedList weather={this.props.weatherList[this.props.detailIndex]} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(WeatherTable);\r\n\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Autosuggest from 'react-autosuggest';\r\nimport match from 'autosuggest-highlight/match';\r\nimport parse from 'autosuggest-highlight/parse';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Popper from '@material-ui/core/Popper';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nfunction renderInputComponent(inputProps) {\r\n  const { classes, inputRef = () => { }, ref, ...other } = inputProps;\r\n\r\n  return (\r\n    <TextField\r\n      InputProps={{\r\n        inputRef: node => {\r\n          ref(node);\r\n          inputRef(node);\r\n        },\r\n        classes: {\r\n          input: classes.input,\r\n        },\r\n      }}\r\n      {...other}\r\n    />\r\n  );\r\n}\r\n\r\nfunction renderSuggestion(suggestion, { query, isHighlighted }) {\r\n  const matches = match(suggestion.label, query);\r\n  const parts = parse(suggestion.label, matches);\r\n\r\n  return (\r\n    <MenuItem selected={isHighlighted} component=\"div\">\r\n      <div>\r\n        {parts.map((part, index) => {\r\n          return part.highlight ? (\r\n            <span key={String(index)} style={{ fontWeight: 500 }}>\r\n              {part.text}\r\n            </span>\r\n          ) : (\r\n              <strong key={String(index)} style={{ fontWeight: 300 }}>\r\n                {part.text}\r\n              </strong>\r\n            );\r\n        })}\r\n      </div>\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nfunction getSuggestionValue(suggestion) {\r\n  return suggestion.label;\r\n}\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    height: 100,\r\n    margin: 10,\r\n  },\r\n  container: {\r\n    position: 'relative',\r\n  },\r\n  suggestionsContainerOpen: {\r\n    position: 'absolute',\r\n    zIndex: 1,\r\n    marginTop: theme.spacing.unit,\r\n    left: 0,\r\n    right: 10,\r\n  },\r\n  suggestion: {\r\n    display: 'block',\r\n  },\r\n  suggestionsList: {\r\n    margin: 0,\r\n    padding: 0,\r\n    listStyleType: 'none',\r\n  },\r\n  divider: {\r\n    height: theme.spacing.unit * 2,\r\n  },\r\n});\r\n\r\nclass AutoSuggestName extends React.Component {\r\n  popperNode = null;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n\r\n    this.state = {\r\n      single: '',\r\n      suggestions: [],\r\n    };\r\n  }\r\n\r\n  getSuggestions = (value) => {\r\n    const inputValue = value.trim().toLowerCase();\r\n    const inputLength = inputValue.length;\r\n    let count = 0;\r\n\r\n    return inputLength === 0\r\n      ? []\r\n      : this.props.cityNamesForSuggestion.filter(suggestion => {\r\n        const keep =\r\n          count < 5 && suggestion.label.toLowerCase().slice(0, inputLength) === inputValue;\r\n\r\n        if (keep) {\r\n          count += 1;\r\n        }\r\n\r\n        return keep;\r\n      });\r\n  }\r\n\r\n\r\n  handleSuggestionsFetchRequested = ({ value }) => {\r\n    this.setState({\r\n      suggestions: this.getSuggestions(value),\r\n    });\r\n  };\r\n\r\n  handleSuggestionsClearRequested = () => {\r\n    this.setState({\r\n      suggestions: [],\r\n    });\r\n  };\r\n\r\n  handleChange = () => (event, { newValue }) => {\r\n    this.props.handleNameEntry(newValue);\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    const autosuggestProps = {\r\n      renderInputComponent,\r\n      suggestions: this.state.suggestions,\r\n      onSuggestionsFetchRequested: this.handleSuggestionsFetchRequested,\r\n      onSuggestionsClearRequested: this.handleSuggestionsClearRequested,\r\n      getSuggestionValue,\r\n      renderSuggestion,\r\n    };\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <div className={classes.divider} />\r\n        <Autosuggest\r\n          {...autosuggestProps}\r\n          inputProps={{\r\n            classes,\r\n            placeholder: 'Enter name of city',\r\n            value: this.props.name,\r\n            onChange: this.handleChange(),\r\n            inputRef: node => {\r\n              this.popperNode = node;\r\n            },\r\n            InputLabelProps: {\r\n              shrink: true,\r\n            },\r\n          }}\r\n          theme={{\r\n            suggestionsList: classes.suggestionsList,\r\n            suggestion: classes.suggestion,\r\n          }}\r\n          renderSuggestionsContainer={options => (\r\n            <Popper anchorEl={this.popperNode} open={Boolean(options.children)}>\r\n              <Paper\r\n                square\r\n                {...options.containerProps}\r\n                style={{ width: this.popperNode ? this.popperNode.clientWidth : null }}\r\n              >\r\n                {options.children}\r\n              </Paper>\r\n            </Popper>\r\n          )}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nAutoSuggestName.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(AutoSuggestName);","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\n\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport WeatherTable from './Components/WeatherTable';\nimport AutoSuggestName from './Components/AutosuggestName';\nimport API from './api';\n\nimport fullCityList from \"./Data/city.list.json\";\n\n\nconst styles = theme => ({\n  grid: {\n    background: 'black'\n  },\n  button: {\n    margin: theme.spacing.unit * 2,\n    '&:hover': {\n      backgroundColor: '#F64C72',\n    }\n  },\n  errorMsg: {\n    margin: theme.spacing.unit * 2,\n    color: 'red',\n  },\n  pStyle: {\n    fontSize: '45px',\n    textAlign: 'center',\n    color: '#4155B0'\n  },\n  toolbar: theme.mixins.toolbar,\n  tableContainer: {\n    margin: '0% 10%',\n  },\n});\n\nconst defaultCityId = 2193733; //Auckland\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n\n      weatherList: [\n        {\n          day: \"\",\n          date: \"\",\n          temp: \"\",\n          description: \"\"\n        },\n      ],\n      cityNamesForSuggestion: [],\n      cityNameEntered: \"\",\n      invalid: false,   \n      detailIndex: 0, //Which day was selected to show more details\n    }\n  }\n\n\n  updateDetailedList = (index) => {\n    this.setState({\n      detailIndex: index\n    });\n  }\n\n  loadCityNames() {\n    let currentComponent = this;\n\n    var cityNameList = fullCityList.map(city => {\n      var newObj = {\n        label: city.name + \", \" + city.country\n      }\n\n      return newObj;\n    });\n\n\n    currentComponent.setState({\n      cityNamesForSuggestion: cityNameList,\n    });\n\n\n  }\n\n  componentDidMount() {\n    this.loadCityNames();\n    this.setFiveDayWeatherListWithId(defaultCityId);\n  }\n\n  handleNameEntry = (name) => {\n    this.setState({ cityNameEntered: name });\n\n  }\n\n  handleGetWeather = () => {\n    var id = this.getCityIdByName(this.state.cityNameEntered);\n    if (id === -1) {\n      this.setState({ invalid: true });\n      return;\n    }\n    //Now call the API with city ID\n\n    this.setFiveDayWeatherListWithId(id);\n  }\n\n  setFiveDayWeatherListWithId = (id) => {\n    let currentComponent = this;\n\n    API.getWeatherForId(id).then(function (weatherResponse) {\n      let timezone = weatherResponse.city.timezone;\n\n      const fiveDayIndex = [0, 8, 16, 24, 32];  //Three hour intervals, 8 => 24 hours i.e. one day\n      var fiveDayWeatherList = fiveDayIndex.map(index => {\n        const detailedWeatherForDay = weatherResponse.list[index];\n        \n        const minMax = currentComponent.getMinMaxTemp(index, weatherResponse.list);\n        const minTemp = minMax.min;\n        const maxTemp = minMax.max;\n\n        return currentComponent.simplifyWeatherData(detailedWeatherForDay, timezone, minTemp, maxTemp);\n      })\n\n      currentComponent.setState({\n        invalid: false,\n        name: weatherResponse.city.name + \", \" + weatherResponse.city.country,\n        weatherList: fiveDayWeatherList,\n        detailIndex: 0,\n      })\n    });\n  }\n\n  getMinMaxTemp = (startingIndex, fullWeatherList) => {\n    const indexFor24Hrs = [0, 1, 2, 3, 4, 5, 6, 7];\n    const indexToFind = indexFor24Hrs.map(index => index + startingIndex);\n    const temps = indexToFind.map(index => {\n      return fullWeatherList[index].main.temp;\n    });\n\n    const minMax = {\n      min: Math.min(...temps),\n      max: Math.max(...temps)\n    }\n    return minMax;\n  }\n\n  simplifyWeatherData = (weatherData, timezone, minTemp, maxTemp) => {\n    var dateObj = new Date((weatherData.dt + timezone) * 1000);\n    const monthText = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    const weekText = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let simplifiedData = {\n      date: dateObj.getUTCDate(),\n      month: monthText[dateObj.getUTCMonth()],\n      day: weekText[dateObj.getUTCDay()],\n      temp: Math.round(weatherData.main.temp),\n      main: weatherData.weather[0].main,\n      description: weatherData.weather[0].description,\n      min: Math.round(minTemp),\n      max: Math.round(maxTemp),\n      icon: weatherData.weather[0].icon,\n    }\n\n    return simplifiedData;\n  }\n\n  getCityIdByName = (name) => {\n    var nameSplitted = name.split(',');\n    if (nameSplitted.length !== 2) { //Invalid style\n      return -1;\n    }\n\n    var cityName = nameSplitted[0].trim();\n    var countryCode = nameSplitted[1].trim();\n\n    var cityId = -1;\n    fullCityList.forEach(city => {\n      if (city.name === cityName && city.country === countryCode) {\n        cityId = city.id;\n      }\n    });\n\n    return cityId;\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div>\n        <AppBar position=\"absolute\">\n          <Toolbar>\n            <Typography variant=\"title\" color=\"inherit\" noWrap>\n              Yet Another Weather App\n           </Typography>\n          </Toolbar>\n        </AppBar>\n\n\n        <div className={classes.toolbar} />\n        <h1 className={classes.pStyle}>Five Day Weather Forecast</h1>\n        <div className={classes.tableContainer}>\n          <Paper style={{ margin: \"5%\" }} >\n            <Grid container spacing={0}>\n              <Grid item xs={4} >\n                < AutoSuggestName\n                  name={this.state.cityNameEntered}\n                  handleNameEntry={this.handleNameEntry}\n                  cityNamesForSuggestion={this.state.cityNamesForSuggestion}\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={() => this.handleGetWeather()}>\n                  Get Weather!\n                </Button>\n              </Grid>\n              <Grid item xs={3}>\n                <Typography variant=\"h6\" className={classes.errorMsg}>\n                  {this.state.invalid ? 'Invalid city name' : ''}\n                </Typography>\n              </Grid>\n            </Grid>\n\n\n            <WeatherTable \n              weatherList={this.state.weatherList} \n              cityName={this.state.name} \n              updateDetailedList={this.updateDetailedList} \n              detailIndex={this.state.detailIndex}\n            />\n          </Paper >\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}